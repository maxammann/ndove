#!/bin/bash
#
# ARG_POSITIONAL_SINGLE([ssh-destination],[ssh destination you want to connect to],[])
# ARG_POSITIONAL_SINGLE([private-port],[to local port you want to forward],[])
# ARG_POSITIONAL_SINGLE([public-port],[the port on the remote server],[])
# ARG_POSITIONAL_SINGLE([public-ip4],[ipv4 address of the public server],[])
# ARG_POSITIONAL_SINGLE([public-ip6],[ipv6 address of the public server],["::1"])
# ARG_HELP([This script allows you to expose a local port through ssh])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_public_ip6="::1"
# THE DEFAULTS INITIALIZATION - OPTIONALS


print_help()
{
	printf '%s\n' "This script allows you to expose a local port through ssh"
	printf 'Usage: %s [-h|--help] <ssh-destination> <private-port> <public-port> <public-ip4> [<public-ip6>]\n' "$0"
	printf '\t%s\n' "<ssh-destination>: ssh destination you want to connect to"
	printf '\t%s\n' "<private-port>: to local port you want to forward"
	printf '\t%s\n' "<public-port>: the port on the remote server"
	printf '\t%s\n' "<public-ip4>: ipv4 address of the public server"
	printf '\t%s\n' "<public-ip6>: ipv6 address of the public server (default: '"::1"')"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'ssh-destination', 'private-port', 'public-port' and 'public-ip4'"
	test "${_positionals_count}" -ge 4 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require between 4 and 5 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 5 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect between 4 and 5 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_ssh_destination _arg_private_port _arg_public_port _arg_public_ip4 _arg_public_ip6 "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


SSH_DESTINATION=$_arg_ssh_destination
PRIVATE_PORT=$_arg_private_port
TUNNEL_PORT=60123

global_variables=$(cat <<ENDVAR

PUBLIC_IP4=$_arg_public_ip4
PUBLIC_IP6=$_arg_public_ip6
PUBLIC_PORT=$_arg_public_port
TUNNEL_PORT=$TUNNEL_PORT
ENDVAR
)

ssh_command=$(cat <<'ENDSSH'

function socat_tunnel {
    ip_version=$1
    bind_address=$2
    echo "Binding $PUBLIC_PORT to $ip_version:$bind_address"
    socat tcp-listen:$PUBLIC_PORT,pf=$ip_version,reuseaddr,fork,bind=$bind_address tcp:localhost:$TUNNEL_PORT
}

function print_success {
    echo "Sucessfully forwarded local port"
}

if ! command -v socat &> /dev/null
then
    echo "socat is not installed on remote ssh server"
    exit
fi


(trap "kill 0" SIGINT; socat_tunnel ip4 $PUBLIC_IP4 & socat_tunnel ip6 $PUBLIC_IP6 & print_success & cat)

ENDSSH
)

# For debugging:
#echo "$global_variables$ssh_command"

ssh -t -R $TUNNEL_PORT:localhost:$PRIVATE_PORT $SSH_DESTINATION "bash -c '$global_variables$ssh_command'"

# ] <-- needed because of Argbash
